# Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
# the License. A copy of the License is located at
#
#     http://aws.amazon.com/apache2.0/
#
# or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
# and limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Parameters:
  CodeKey:
    Type: String
    Description: >-
      The key that the lambda function code has been uploaded to
Resources:
  ## The main S3 bucket. This must use the same logical resource ID as bootstrap.yaml.
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 1
            Status: Enabled
            Prefix: "AWSLogs/"

  ## The sqs queue we will deliver encrypted messages to
  SQSQueue:
    Type: 'AWS::SQS::Queue'

  ## API Gateway related resources
  RestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      BinaryMediaTypes:
      # TODO: Remove this and use modeled JSON structures?
        - '*/*'
      Name: !Ref 'AWS::StackName'
  RestAPIRootGET:
  # Handle a GET on the root by proxying through to our index.html static asset
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: GET
        PassthroughBehavior: WHEN_NO_MATCH
        Type: HTTP_PROXY
        Uri: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/static-assets/index.html
      ResourceId: !GetAtt RestAPI.RootResourceId
      RestApiId: !Ref RestAPI
    DependsOn:
      - RestAPI
  RestAPIRootPost:
  # Handle POSTs to the root by delegating to our Java lambda code
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunc.Arn}/invocations
      ResourceId: !GetAtt RestAPI.RootResourceId
      RestApiId: !Ref RestAPI

  # Configuration for the /static path - we delegate requests under this path directly through to S3.
  RestAPIStaticResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'static'
  RestAPIStaticWildcardResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !Ref RestAPIStaticResource
      PathPart: '{path+}'
  RestAPIStaticGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RequestParameters:
        method.request.path.path: true
      Integration:
        RequestParameters:
          integration.request.path.path: method.request.path.path
        IntegrationHttpMethod: ANY
        PassthroughBehavior: WHEN_NO_MATCH
        Type: HTTP_PROXY
        Uri: !Sub https://${S3Bucket}.s3.${AWS::Region}.amazonaws.com/static-assets/{path}
      ResourceId: !Ref RestAPIStaticWildcardResource
      RestApiId: !Ref RestAPI

  # Configuration for /logs. We use this to redirect to the cloudwatch logs console. To avoid needing to involve the
  # java handler (which has higher startup times and would necessitate using the proxy handler mode), this is
  # implemented with a separate, simple lambda function.
  RestAPILogsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'logs'
  RestAPILogsGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Type: AWS_PROXY
        Uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LogsConsoleRedirectLambdaFunc.Arn}/invocations
      ResourceId: !Ref RestAPILogsResource
      RestApiId: !Ref RestAPI

  LogsConsoleRedirectLambdaFunc:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # This is not actually a ZIP file, but cloudformation names it as such.
        ZipFile: !Sub |
          var querystring = require("querystring");
          var arn = "${KMSKey.Arn}";
          var query = "{ $.resources[0].ARN = " + JSON.stringify(arn) + " }";
          var encodedquery = querystring.escape(query);
          var kmslocation = "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}" +
                         "#logEventViewer:group=${CloudtrailLogGroup};filter=" + encodedquery;
          var lambdalocation = "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}" +
                         "#logEventViewer:group=/aws/lambda/${LambdaFunc}";
          exports.redirect = function(event, context, callback) {
              console.log('Received event: ' + JSON.stringify(event));
              var location = kmslocation;
              if (event.queryStringParameters && event.queryStringParameters.type === 'lambda') {
                  location = lambdalocation;
              }
              response = { isBase64Encoded: false,
                           statusCode: 303,
                           headers: {
                               "Location": location
                           },
                           body: "Redirecting to the cloudwatch logs console..."
              };
              callback(null, response);
          }
      Handler: index.redirect
      MemorySize: 128
      Role: !ImportValue "busy-engineers-workshop-LambdaRole"
      Runtime: nodejs12.x
      Timeout: 5
  RedirectPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LogsConsoleRedirectLambdaFunc
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*

  # API gateway stage and deployment configuration. We use a new logical ID for the deployment each time we update the
  # CF template; this is because the deployment captures the current state of the resource and method tree at the time
  # it is created, so to reflect any changes it needs to be recreated and the new deployment bound to the stage.
  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref RestAPI
      DeploymentId: !Ref ApiDeployment%UNIQUE%
      StageName: test
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'

  ApiDeployment%UNIQUE%:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref RestAPI
      Description: Example deployment
    DependsOn:
    # This DependsOn relation ensures that we don't create the deployment before we finish configuring the resources;
    # otherwise the deployment might capture an incomplete configuration.
      - RestAPIRootGET
      - RestAPIRootPost
      - RestAPIStaticGET
      - RestAPILogsGET

  ## KMS key configuration
  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: !Sub "KMS key for use in the cloudformation stack ${AWS::StackName}"
      KeyPolicy:
        Version: 2012-10-17
        Id: key-policy
        Statement:
          - Sid: Allow account-level IAM policies to apply to the key
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - '*'
            Resource: '*'

  LambdaFunc:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref CodeKey
      Handler: example.EntryPoint
      ## We don't need this much memory, but setting a high memorysize means we get more CPU allocated, which reduces
      ## startup times.
      MemorySize: 1536
      Role: !ImportValue "busy-engineers-workshop-LambdaRole"
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          kms_key_id: !GetAtt KMSKey.Arn
          queue_url: !Ref SQSQueue
          use_cache: true
          log_group_name: !Ref CloudtrailLogGroup
          cross_region_kms_key_id: !GetAtt CreateCustomerManagedKey2.KeyId

  MainAppPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaFunc
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*

# Configure a cloudtrail to deliver via cloudwatch logs; having them in CWlogs makes it easier to search for events
# related to our KMS key.
  Cloudtrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      IsMultiRegionTrail: false # We only care about demo resources in the same region
      IsLogging: true
      CloudWatchLogsLogGroupArn: !GetAtt CloudtrailLogGroup.Arn
      CloudWatchLogsRoleArn: !ImportValue "busy-engineers-workshop-CloudtrailRole"
# an S3 bucket is still required, even when using CWlogs delivery
      S3BucketName: !Ref S3Bucket
    DependsOn:
     # We need to wait for the various IAM policies to be configured, as CW logs will validate these policies when the
     # trail is created, and fail the trail creation if they are not configured appropriately.
      - CloudtrailBucketPolicy

  CloudtrailLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      RetentionInDays: 1

  CloudtrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AclCheck
            Effect: Allow
            Principal: { Service: cloudtrail.amazonaws.com }
            Action: s3:GetBucketAcl
            Resource: !GetAtt S3Bucket.Arn
          - Sid: CloudtrailWrite
            Effect: Allow
            Principal: { Service: cloudtrail.amazonaws.com }
            Action: s3:PutObject
            Resource: !Sub "${S3Bucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": "bucket-owner-full-control"

  CustomerManagedKeyCreateLambdaFunc:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # This is not actually a ZIP file, but cloudformation names it as such.
        ZipFile: !Sub |
          import json
          import logging
          import boto3
          from botocore.vendored import requests

          lg = logging.getLogger()
          lg.setLevel(logging.INFO)


          def lambda_handler(event, context):
              try:
                  lg.info('Request Received: {}'.format(event))
                  region_name = event['ResourceProperties']['Region']
                  policy = event['ResourceProperties']['Policy']
                  session = boto3.session.Session(region_name=region_name)
                  client = session.client('kms')

                  if event['RequestType'] == 'Create':
                      try:
                          lg.info('Request Type: Create')
                          state, keyId = create(region_name, client, policy)
                          return send_response(event, context, 'SUCCESS', keyId, data={'KeyId': keyId})
                      except Exception:
                          return send_response(event, context, 'FAILED', keyId=None)

                  if event['RequestType'] == 'Delete':
                      keyId = event['PhysicalResourceId']
                      lg.info('Request Type: Delete')
                      state = delete(client, keyId)
                      if state:
                          return send_response(event, context, 'SUCCESS', keyId)
                      else:
                          return send_response(event, context, 'FAILED', keyId)

                  if event['RequestType'] == 'Update':
                      keyId = event['PhysicalResourceId']
                      lg.info('Request Type: Update')
                      try:
                          response = client.describe_key(KeyId=keyId)
                          return send_response(event, context, 'SUCCESS', keyId)
                      except Exception:
                          return send_response(event, context, 'FAILED', keyId)
              except Exception as e:
                  lg.info(e)
                  return send_response(event, context, 'Failed', keyId=None)


          def create(region_name, client, policy, **_):
              lg.info('entered create func')
              desc = 'Key for protecting critical data in {}'.format(region_name)

              response = client.create_key(
                  Policy=policy,
                  Description=desc,
                  KeyUsage='ENCRYPT_DECRYPT',
                  BypassPolicyLockoutSafetyCheck=True
              )
              key_id = response['KeyMetadata']['Arn']
              response = client.create_alias(
                  AliasName='alias/busy-engineers-workshop-us-west-2-key',
                  TargetKeyId=key_id
              )
              return True, key_id


          def delete(client, key_id, **_):
              try:
                  response = client.describe_key(
                      KeyId=key_id
                  )
                  deletion_status = response['KeyMetadata']['KeyState']
                  if deletion_status != 'PendingDeletion':
                      response = client.schedule_key_deletion(
                          KeyId=key_id,
                          PendingWindowInDays=7
                      )

                      response = client.delete_alias(
                          AliasName='alias/busy-engineers-workshop-us-west-2-key'
                      )
                      return True
              except Exception:
                  return False


          def send_response(event, context, resp_status, keyId, data=None):
              if data is None:
                  data = {}
              resp_body = {'Status': resp_status,
                              'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                              'PhysicalResourceId': keyId,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId'],
                              'Data': data}
              lg.info('RESPONSE BODY:n' + json.dumps(resp_body))
              try:
                  req = requests.put(event['ResponseURL'], data=json.dumps(resp_body))
                  if req.status_code != 200:
                      lg.info(req.text)
                      raise Exception('Did not receive 200')
                  return
              except requests.exceptions.RequestException as e:
                  lg.info(e)
                  raise
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !ImportValue "busy-engineers-workshop-LambdaRole"
      Runtime: python3.6
      Timeout: 5

  CreateCustomerManagedKey2:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomerManagedKeyCreateLambdaFunc.Arn
      Region: "us-west-2"
      Policy: !Sub |
        {
          "Version": "2012-10-17",
          "Id": "workshop-key-policy",
          "Statement": [
            {
              "Sid": "Allow access for Key Administrators",
              "Effect": "Allow",
              "Principal": {"AWS": [
                "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
              ]},
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:TagResource",
                "kms:UntagResource",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow generate data key access",
              "Effect": "Allow",
              "Principal": {"AWS": [
                "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
              ]},
              "Action": [
                "kms:GenerateDataKey*"
              ],
              "Resource": "*"
            }
          ]
        }
